package com.example.employee.controller;

import org.junit.jupiter.api.BeforeEach;
import org.mockito.InjectMocks;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

import com.example.employee.repository.EmployeeRepository;

/**
 * The Class CarrierShippingControllerTest.
 */
@WebMvcTest(controllers = EmployeeController.class)
public class EmployeeControllerTest {
	
	/** The mock mvc. */
	@Autowired
	private MockMvc mockMvc;

	/** The wac. */
	@Autowired
	private WebApplicationContext wac;
	
	@InjectMocks
	private EmployeeController employeeController;
	
	@MockBean
	private EmployeeRepository employeeRepository;
	
	#
	/**
	 * Setup.
	 */
	@BeforeEach
	public void setup() {
		this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).build();
		MockitoAnnotations.initMocks(this);
	}
	
	@Test
	void testDeleteEmployee() throws Exception {
		final var id = 1;
		Mockito.doNothing().when(this.employeeRepository).deleteByConfigruationCode(id);
		Mockito.doNothing().when(this.carrierShippingServices).deleteCarrierShipping(id);
		final RequestBuilder requestBuilder = MockMvcRequestBuilders
				.delete(CommonConstants.BASE_CONTEXT_PATH + "/carrier-shipping/{id}", id)
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON);
		final var result = this.mockMvc.perform(requestBuilder).andReturn();
		assertEquals(HttpStatus.OK.value(), result.getResponse().getStatus());
	}

}
